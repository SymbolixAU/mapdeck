% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_layer_trips.R
\name{add_trips}
\alias{add_trips}
\title{Add Trips}
\usage{
add_trips(
  map,
  data = get_map_data(map),
  stroke_colour = NULL,
  stroke_width = NULL,
  opacity = 0.3,
  palette = "viridis",
  trail_length = 180,
  start_time = get_m_range_start(data),
  end_time = get_m_range_end(data),
  animation_speed = 30,
  layer_id = NULL,
  legend = FALSE,
  legend_options = NULL,
  legend_format = NULL,
  digits = 6
)
}
\arguments{
\item{map}{a mapdeck map object}

\item{data}{sf object with XYZM dimensions.}

\item{stroke_colour}{variable of data or hex colour for the stroke.}

\item{stroke_width}{width of the stroke in meters. Default 1.}

\item{opacity}{single value in [0,1]}

\item{palette}{string or matrix. String will be one of \code{colourvalues::colour_palettes()}.
A matrix must have at least 5 rows, and 3 or 4 columns of values between [0, 255],
where the 4th column represents the alpha. You can use a named list to specify a different
palette for different colour options (where available),
 e.g. list(fill_colour = "viridis", stroke_colour = "inferno")}

\item{trail_length}{how long it takes for the trail to completely fade out
(in same units as timestamps )}

\item{start_time}{the minimum timestamp}

\item{end_time}{the maximum timestamp}

\item{layer_id}{single value specifying an id for the layer. Use this value to
distinguish between shape layers of the same type. Layers with the same id are likely
to conflict and not plot correctly}

\item{legend}{either a logical indiciating if the legend(s) should be displayed, or
a named list indicating which colour attributes should be included in the legend.}

\item{legend_options}{A list of options for controlling the legend.}

\item{legend_format}{A list containing functions to apply to legend values. See section legend}
}
\description{
The Trips Layer takes an sf object with Z and M attributes and renders
it as animated trips
}
\section{legend}{


The \code{legend_options} can be used to control the appearance of the legend.
This should be a named list, where the names are one of
\itemize{
  \item{css - a string of valid \code{css} for controlling the appearance of the legend}
  \item{title - a string to use for the title of the legend}
  \item{digits - number to round the legend values to}
}

If the layer allows different fill and stroke colours, you can use different options for each. See examples in \link{add_arc}.

The \code{legend_format} can be used to control the format of the values in the legend.
This should be a named list, where the names are one of
\itemize{
  \item{fill_colour}
  \item{stroke_colour}
}

depending on which type of colouring the layer supports.

The list elements must be functions to apply to the values in the legend.
}

\section{id}{


The \code{id} is returned to your R session from an interactive shiny environment
by observing layer clicks. This is useful for returning the data.frame row relating to the
cliked shape.

From within a shiny server you would typically use \code{ observeEvent({input$map_arc_click})},
where 'map' is the map_id supplied to \code{mapdeckOutput()}, and 'arc' is the layer
you are clicking on
}

\examples{
\donttest{


library(gpx)
gpx <- system.file("gpx/city_trail.gpx", package = "gpx")
sf <- gpx::gpx_sf( gpx, time = "counter" )

mapdeck(
	style = mapdeck_style("dark")
	#, location = c(145, -37.9)
	#, zoom = 8
) \%>\%
	add_trips(
		data = sf
		, trail_length = 2000
		, animation_speed = 50
		, stroke_colour = "#FFFFFF"
	)

}

\code{add_trips} supports LINESTRING and MULTILINESTRING sf objects

}
