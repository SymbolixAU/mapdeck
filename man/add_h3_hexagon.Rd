% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_layer_h3_hexagon.R
\name{add_h3_hexagon}
\alias{add_h3_hexagon}
\title{Add hexagon}
\usage{
add_h3_hexagon(
  map,
  data = get_map_data(map),
  hexagon = NULL,
  stroke_colour = NULL,
  stroke_width = NULL,
  stroke_opacity = NULL,
  fill_colour = NULL,
  fill_opacity = NULL,
  elevation = NULL,
  tooltip = NULL,
  auto_highlight = FALSE,
  highlight_colour = "#AAFFFFFF",
  light_settings = list(),
  layer_id = NULL,
  id = NULL,
  palette = "viridis",
  na_colour = "#808080FF",
  legend = FALSE,
  legend_options = NULL,
  legend_format = NULL,
  update_view = TRUE,
  focus_layer = FALSE,
  digits = 6,
  transitions = NULL
)
}
\arguments{
\item{map}{a mapdeck map object}

\item{data}{data to be used in the layer. All coordinates are expected to be
EPSG:4326 (WGS 84) coordinate system}

\item{stroke_width}{width of the stroke in pixels}

\item{elevation}{column containing the elevation of the value.}

\item{tooltip}{variable of \code{data} containing text or HTML to render as a tooltip}

\item{auto_highlight}{logical indicating if the shape under the mouse should auto-highlight}

\item{highlight_colour}{hex string colour to use for highlighting. Must contain the alpha component.}

\item{layer_id}{single value specifying an id for the layer. Use this value to
distinguish between shape layers of the same type. Layers with the same id are likely
to conflict and not plot correctly}

\item{id}{an id value in \code{data} to identify layers when interacting in Shiny apps.}

\item{palette}{string or matrix. String will be one of \code{colourvalues::colour_palettes()}.
A matrix must have at least 5 rows, and 3 or 4 columns of values between [0, 255],
where the 4th column represents the alpha. You can use a named list to specify a different
palette for different colour options (where available),
 e.g. list(fill_colour = "viridis", stroke_colour = "inferno")}

\item{na_colour}{hex string colour to use for NA values}

\item{legend}{logical indicating if a legend should be displayed}

\item{legend_options}{A list of options for controlling the legend.}

\item{legend_format}{A list containing functions to apply to legend values. See section legend}

\item{update_view}{logical indicating if the map should update the bounds to include this layer}

\item{focus_layer}{logical indicating if the map should update the bounds to only include this layer}

\item{transitions}{list specifying the duration of transitions.}

\item{lon}{column containing longitude values}

\item{lat}{column containing latitude values}

\item{polyline}{column of \code{data} containing the polylines}

\item{radius}{in metres. Default 1000}

\item{elevation_scale}{value to scale the elevations of the hexagons. Default 1}

\item{colour_range}{vector of 6 hex colours}

\item{elevation_function}{one of 'min', 'mean', 'max', 'sum'.
IF supplied it specifies how the elevation values are calcualted. Defaults to sum.}

\item{colour}{column containing numeric values to colour by.}

\item{colour_function}{one of 'min', 'mean', 'max', 'sum'.
If supplied it specifies how the colour values are calculated. Defaults to sum.}
}
\description{
The Hexagon Layer renders a hexagon heatmap based on an array of points.
It takes the radius of hexagon bin, projects points into hexagon bins.
The color and height of the hexagon is scaled by number of points it contains.
}
\details{
\code{add_hexagon} supports POINT and MULTIPOINT sf objects
}
\section{transitions}{


The transitions argument lets you specify the time it will take for the shapes to transition
from one state to the next. Only works in an interactive environment (Shiny)
and on WebGL-2 supported browsers and hardware.

The time is in milliseconds

Available transitions for hexagon

list(
elevation = 0
colour = 0
)
}

\section{data}{


If the \code{data} is a simple feature object, the geometry column is automatically
detected. If the sf object contains more than one geometry column and you want to use a specific one,
you'll need to set the active geometry using \code{sf::st_geometry( x ) <- "your_column" },
where \code{"your_column"} is the name of the column you're activating. See \code{?sf::st_geometry}
}

\examples{
\dontrun{

## You need a valid access token from Mapbox
key <- 'abc'
set_token( key )

}

}
